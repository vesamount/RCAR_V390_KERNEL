/*
 * ON Semiconductor AR0233 sensor camera wizard 1920x1080@30/BGGR/MIPI
 *
 * Copyright (C) 2018 Cogent Embedded, Inc.
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 */

//#define AR0233_DISPLAY_PATTERN_FIXED
//#define AR0233_DISPLAY_PATTERN_COLOR_BAR

#define AR0233_MAX_WIDTH	1792 //1920
#define AR0233_MAX_HEIGHT	1080

#define AR0233_DELAY		0xffff

#define AR0233_SENSOR_WIDTH	1920
#define AR0233_SENSOR_HEIGHT	1280

#define AR0233_X_START		((AR0233_SENSOR_WIDTH - AR0233_MAX_WIDTH) / 2)
#define AR0233_Y_START		((AR0233_SENSOR_HEIGHT - AR0233_MAX_HEIGHT) / 2)
#define AR0233_X_END		(AR0233_X_START + AR0233_MAX_WIDTH - 1)
#define AR0233_Y_END		(AR0233_Y_START + AR0233_MAX_HEIGHT - 1)

struct ar0233_reg {
	u16	reg;
	u16	val;
};

static const struct ar0233_reg ar0233_regs_wizard[] = {
{0x301A, 0x0018}, // RESET_REGISTER
{AR0233_DELAY, 500}, // Wait 500ms
{0x3070, 0x0000},	//  1: Solid color test pattern,
			//  2: Full color bar test pattern,
			//  3: Fade to grey color bar test pattern,
			//256: Walking 1 test pattern (12 bit)
{0x3072, 0x0123},	// R
{0x3074, 0x0456},	// G(GR row)
{0x3076, 0x0abc},	// B
{0x3078, 0x0def},	// G(GB row)
#ifdef AR0233_DISPLAY_PATTERN_FIXED
{0x3070, 0x0001},
#endif
#ifdef AR0233_DISPLAY_PATTERN_COLOR_BAR
{0x3070, 0x0002},
#endif
{AR0233_DELAY, 100}, // Wait 100ms

{0x3092, 0x0C24},
{0x337A, 0x0C80},
{0x3520, 0x1288},
{0x3522, 0x880C},
{0x3524, 0x0C12},
{0x352C, 0x1212},
{0x354A, 0x007F},
{0x350C, 0x0568},
{0x3506, 0x3333},
{0x3508, 0x3333},
{0x3100, 0x4000},
{0x3280, 0x0FA0},
{0x3282, 0x0FA0},
{0x3284, 0x0FA0},
{0x3286, 0x0FA0},
{0x3288, 0x0FA0},
{0x328A, 0x0FA0},
{0x328C, 0x0FA0},
{0x328E, 0x0FA0},
{0x3290, 0x0FA0},
{0x3292, 0x0FA0},
{0x3294, 0x0FA0},
{0x3296, 0x0FA0},
{0x3298, 0x0FA0},
{0x329A, 0x0FA0},
{0x329C, 0x0FA0},
{0x329E, 0x0FA0},

{AR0233_DELAY, 200}, // Wait 200ms

{0x2512, 0x8000},
{0x2510, 0x0905},
{0x2510, 0x3350},
{0x2510, 0x2004},
{0x2510, 0x1460},
{0x2510, 0x1578},
{0x2510, 0x0901},
{0x2510, 0x7B24},
{0x2510, 0xFF24},
{0x2510, 0xFF24},
{0x2510, 0xEA24},
{0x2510, 0x1022},
{0x2510, 0x2410},
{0x2510, 0x155A},
{0x2510, 0x0901},
{0x2510, 0x1400},
{0x2510, 0x24FF},
{0x2510, 0x24FF},
{0x2510, 0x24EA},
{0x2510, 0x2324},
{0x2510, 0x647A},
{0x2510, 0x2404},
{0x2510, 0x052C},
{0x2510, 0x400A},
{0x2510, 0xFF0A},
{0x2510, 0xFF0A},
{0x2510, 0x1008},
{0x2510, 0x3851},
{0x2510, 0x1440},
{0x2510, 0x0004},
{0x2510, 0x0801},
{0x2510, 0x0408},
{0x2510, 0x1180},
{0x2510, 0x2652},
{0x2510, 0x1518},
{0x2510, 0x0906},
{0x2510, 0x1348},
{0x2510, 0x1002},
{0x2510, 0x1016},
{0x2510, 0x1181},
{0x2510, 0x1189},
{0x2510, 0x1056},
{0x2510, 0x1210},
{0x2510, 0x0901},
{0x2510, 0x0D09},
{0x2510, 0x1413},
{0x2510, 0x8809},
{0x2510, 0x2B15},
{0x2510, 0x8809},
{0x2510, 0x0311},
{0x2510, 0xD909},
{0x2510, 0x1214},
{0x2510, 0x4109},
{0x2510, 0x0312},
{0x2510, 0x1409},
{0x2510, 0x0110},
{0x2510, 0xD612},
{0x2510, 0x1012},
{0x2510, 0x1212},
{0x2510, 0x1011},
{0x2510, 0xDD11},
{0x2510, 0xD910},
{0x2510, 0x5609},
{0x2510, 0x1511},
{0x2510, 0xDB09},
{0x2510, 0x1511},
{0x2510, 0x9B09},
{0x2510, 0x0F11},
{0x2510, 0xBB12},
{0x2510, 0x1A12},
{0x2510, 0x1014},
{0x2510, 0x6012},
{0x2510, 0x5010},
{0x2510, 0x7610},
{0x2510, 0xE609},
{0x2510, 0x0812},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x290B},
{0x2510, 0x0904},
{0x2510, 0x1440},
{0x2510, 0x0923},
{0x2510, 0x15C8},
{0x2510, 0x13C8},
{0x2510, 0x092C},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x0C09},
{0x2510, 0x0C14},
{0x2510, 0x4109},
{0x2510, 0x1112},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0xBF11},
{0x2510, 0xBB10},
{0x2510, 0x6611},
{0x2510, 0xFB09},
{0x2510, 0x3511},
{0x2510, 0xBB12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x0011},
{0x2510, 0xB812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x0008},
{0x2510, 0x3053},
{0x2510, 0x4215},
{0x2510, 0x4013},
{0x2510, 0x4010},
{0x2510, 0x0210},
{0x2510, 0x1611},
{0x2510, 0x8111},
{0x2510, 0x8910},
{0x2510, 0x5612},
{0x2510, 0x1009},
{0x2510, 0x010D},
{0x2510, 0x0815},
{0x2510, 0xC015},
{0x2510, 0xD013},
{0x2510, 0x5009},
{0x2510, 0x1313},
{0x2510, 0xD009},
{0x2510, 0x0215},
{0x2510, 0xC015},
{0x2510, 0xC813},
{0x2510, 0xC009},
{0x2510, 0x0515},
{0x2510, 0x8813},
{0x2510, 0x8009},
{0x2510, 0x0213},
{0x2510, 0x8809},
{0x2510, 0x0411},
{0x2510, 0xC909},
{0x2510, 0x0814},
{0x2510, 0x0109},
{0x2510, 0x0B11},
{0x2510, 0xD908},
{0x2510, 0x1400},
{0x2510, 0x091A},
{0x2510, 0x1440},
{0x2510, 0x0903},
{0x2510, 0x1214},
{0x2510, 0x0901},
{0x2510, 0x10D6},
{0x2510, 0x1210},
{0x2510, 0x1212},
{0x2510, 0x1210},
{0x2510, 0x11DD},
{0x2510, 0x11D9},
{0x2510, 0x1056},
{0x2510, 0x0917},
{0x2510, 0x11DB},
{0x2510, 0x0913},
{0x2510, 0x11FB},
{0x2510, 0x0905},
{0x2510, 0x11BB},
{0x2510, 0x121A},
{0x2510, 0x1210},
{0x2510, 0x1460},
{0x2510, 0x1250},
{0x2510, 0x1076},
{0x2510, 0x10E6},
{0x2510, 0x0901},
{0x2510, 0x15A8},
{0x2510, 0x0901},
{0x2510, 0x13A8},
{0x2510, 0x1240},
{0x2510, 0x1260},
{0x2510, 0x0925},
{0x2510, 0x13AD},
{0x2510, 0x0902},
{0x2510, 0x0907},
{0x2510, 0x1588},
{0x2510, 0x0901},
{0x2510, 0x138D},
{0x2510, 0x0B09},
{0x2510, 0x0914},
{0x2510, 0x4009},
{0x2510, 0x0B13},
{0x2510, 0x8809},
{0x2510, 0x1C0C},
{0x2510, 0x0920},
{0x2510, 0x1262},
{0x2510, 0x1260},
{0x2510, 0x11BF},
{0x2510, 0x11BB},
{0x2510, 0x1066},
{0x2510, 0x090A},
{0x2510, 0x11FB},
{0x2510, 0x093B},
{0x2510, 0x11BB},
{0x2510, 0x1263},
{0x2510, 0x1260},
{0x2510, 0x1400},
{0x2510, 0x1508},
{0x2510, 0x11B8},
{0x2510, 0x12A0},
{0x2510, 0x1200},
{0x2510, 0x1026},
{0x2510, 0x1000},
{0x2510, 0x1300},
{0x2510, 0x1100},
{0x2510, 0x437A},
{0x2510, 0x0609},
{0x2510, 0x0B05},
{0x2510, 0x0708},
{0x2510, 0x4137},
{0x2510, 0x502C},
{0x2510, 0x2CFE},
{0x2510, 0x15FE},
{0x2510, 0x0C2C},
{0x32E6, 0x00E0},
{0x1008, 0x036F},
{0x100C, 0x058F},
{0x100E, 0x07AF},
{0x1010, 0x014F},
{0x3230, 0x0312},
{0x3232, 0x0532},
{0x3234, 0x0752},
{0x3236, 0x00F2},
{0x3566, 0x3328},
{0x32D0, 0x3A02},
{0x32D2, 0x3508},
{0x32D4, 0x3702},
{0x32D6, 0x3C04},
{0x32DC, 0x370A},
{0x30B0, 0x0800},
{0x302A, 0x0006},
{0x302C, 0x0001},
{0x302E, 0x0002},
{0x3030, 0x002C},
{0x3036, 0x000C},
{0x3038, 0x0001},
{0x30B0, 0x0A00},
{0x30A2, 0x0001},
{0x30A6, 0x0001},
{0x3040, 0x0000},
{0x3040, 0x0000},
{0x3044, 0x0400},
{0x3044, 0x0400},
{0x3044, 0x0400},
{0x3044, 0x0400},
{0x3064, 0x1882},
{0x3064, 0x1802},
{0x3064, 0x1802},
{0x3064, 0x1802},
{0x33E0, 0x0C80},
{0x33E0, 0x0C80},
{0x3180, 0x0080},
{0x33E4, 0x0080},
{0x33E0, 0x0C80},
{0x33E0, 0x0C80},
{0x3004, AR0233_X_START}, // X_ADDR_START_
{0x3008, AR0233_X_END}, // X_ADDR_END_
{0x3002, AR0233_Y_START}, // Y_ADDR_START_
{0x3006, AR0233_Y_END}, // Y_ADDR_END_
{0x3402, 0x0000 | AR0233_MAX_WIDTH}, // X_OUTPUT_CONTROL
{0x3404, 0x0000 | AR0233_MAX_HEIGHT}, // Y_OUTPUT_CONTROL
{0x3032, 0x0000},
{0x3400, 0x0010},
#if 1
/* disable HDR */
{0x3082, 0x0000},
{0x30BA, 0x11F2},
#endif
{AR0233_DELAY, 100}, // Wait 100ms

#if 0
{0x300A, AR0233_SENSOR_HEIGHT + 356}, // FRAME_LENGTH_LINES_
{0x300C, AR0233_SENSOR_WIDTH + 100}, // LINE_LENGTH_PCK_
#else
{0x300A, AR0233_SENSOR_HEIGHT + 208}, // FRAME_LENGTH_LINES_
{0x300C, AR0233_SENSOR_WIDTH + 300}, // LINE_LENGTH_PCK_
#endif
{0x3042, 0x0000},
{0x3238, 0x0222},
{0x3012, 0x0144},
{0x3014, AR0233_SENSOR_WIDTH + 100},
{0x321E, AR0233_SENSOR_WIDTH + 100},
{0x3222, AR0233_SENSOR_WIDTH + 100},
{0x30B0, 0x0B00},
{0x32EA, 0x3C0E},
{0x32EA, 0x3C0E},
{0x32EA, 0x3C0E},
{0x32EC, 0x72A1},
{0x32EC, 0x72A1},
{0x32EC, 0x72A1},
{0x32EC, 0x72A1},
{0x32EC, 0x72A1},
{0x32EC, 0x72A1},
{0x31D0, 0x0001}, // COMPANDING
{0x31AE, 0x0004},
{0x31AE, 0x0304},
{0x31AC, 0x140C}, // DATA_FORMAT_BITS: RAW12
{0x301A, 0x1098},
{0x301A, 0x1018},
{0x301A, 0x1018},
{0x31AE, 0x0204},
{0x3342, 0x122C},
{0x3346, 0x122C},
{0x334A, 0x122C},
{0x334E, 0x122C},
{0x3344, 0x0011},
{0x3348, 0x0111},
{0x334C, 0x0211},
{0x3350, 0x0311},
{0x31B0, 0x0049},
{0x31B2, 0x0033},
{0x31B4, 0x2185},
{0x31B6, 0x1146},
{0x31B8, 0x3047},
{0x31BA, 0x0186},
{0x31BC, 0x0805},
#if 1
/* Enable trigger input */
{0x340A, 0x00E0}, // GPIO_CONTROL1: GPIO1 is trigger
{0x340C, 0x0002}, // GPIO_CONTROL2: GPIO1 is trigger
{0x30CE, 0x0120}, // TRIGGER_MODE
//{0x30DC, 0x0120}, // TRIGGER_DELAY
#endif
{0x3366, 0x0aaa}, // ANALOG_GAIN
{0x301A, 0x011C},
};
