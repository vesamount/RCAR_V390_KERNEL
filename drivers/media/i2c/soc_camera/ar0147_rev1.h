/*
 * ON Semiconductor AR0147 sensor camera wizard 1344x968@30/BGGR/BT601/RAW12
 *
 * Copyright (C) 2019 Cogent Embedded, Inc.
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 */

// #define AR0147_REV1_2_Recommended_Settings

static const struct ar0147_reg ar0147_rev1_Reset[] = {
{0x301A, 0x0001},	// reset
{AR0147_DELAY, 100},
{0x301A, 0x10D8},	// Stream off and setup parallel
{0x3070, 0x0001},
{0x3070, 0x0000},	//  1: Solid color test pattern,
			//  2: Full color bar test pattern,
			//  3: Fade to grey color bar test pattern,
			//256: Walking 1 test pattern (12 bit)
#ifdef AR0147_DISPLAY_PATTERN_FIXED
{0x3070, 0x0001},
#endif
{0x3072, 0x0fff},	// R
{0x3074, 0x0fff},	// G(GR row)
{0x3076, 0x0fff},	// B
{0x3078, 0x0fff},	// G(GB row)
#ifdef AR0147_DISPLAY_PATTERN_COLOR_BAR
{0x3070, 0x0002},
#endif
{AR0147_DELAY, 250},
{ }
}; /* Reset */

static const struct ar0147_reg ar0147_rev1_Sensor_Setup[] = {
/* Recommended_Settings */
{0x30B0, 0x980C}, // DIGITAL_TEST
{0x3C08, 0x0100},
{0x3C0C, 0x0518},
{0x3092, 0x1A24},
{0x30B4, 0x01C7}, // TEMPSENS0_CTRL_REG
{0x30B8, 0x0007}, // TEMPSENS1_CTRL_REG
{0x3364, 0x0680},
{0x3372, 0x700F},
{0x350C, 0x035A},
{0x350E, 0x0514},
{0x3518, 0x14FE},
{0x351A, 0x6000},
{0x3520, 0x08CC},
{0x3522, 0xCC08},
{0x3524, 0x0C00},
{0x3526, 0x0F00},
{0x3528, 0xFFFF},
{0x352A, 0x0897},
{0x352C, 0x0012},
{0x352E, 0x00FF},
{0x3530, 0xFF00},
{0x3536, 0xFF24},
{0x3538, 0x3CFF},
{0x353A, 0x90E0},
{0x353C, 0x3F00},
{0x3540, 0xC63C},
{0x3542, 0x3C3C},
{0x3544, 0x3C46},
{0x3546, 0x5458},
{0x3548, 0x5800},
{0x354A, 0x007F},
{0x3556, 0x1010},
{0x3F90, 0x0800}, // TEMPVSENS0_TMG_CTRL
{0x3F9A, 0x0000}, // TEMPVSENS0_BOOST_SAMP_CTRL
{0x3116, 0x0001}, // HDR_CONTROL3
{0x3102, 0x60A0},
{0x3104, 0x60A0},
{0x3106, 0x60A0},

//Set REV1 Minimum Analog Gain to LCG 3.5X
{0x3366, 0xCCCC},
{0x3362, 0x0000},
#ifdef AR0147_REV1_REV1_2_Recommended_Settings
//Set REV1.2 Default Analog Gain to LCG 8X (minimum recommended)
{0x3366, 0xEEEE},
#endif /* REV1.2_Recommended_Settings */
/* Recommended_Settings */

/* Sequencer_Update */
{0x2512, 0x8000},
{0x2510, 0x0901},
{0x2510, 0x3350},
{0x2510, 0x2004},
{0x2510, 0x1420},
{0x2510, 0x1578},
{0x2510, 0x087B},
{0x2510, 0x24FF},
{0x2510, 0x24FF},
{0x2510, 0x24EA},
{0x2510, 0x2410},
{0x2510, 0x2224},
{0x2510, 0x1015},
{0x2510, 0x5813},
{0x2510, 0x0214},
{0x2510, 0x0024},
{0x2510, 0xFF24},
{0x2510, 0xFF24},
{0x2510, 0xEA23},
{0x2510, 0x2464},
{0x2510, 0x7A24},
{0x2510, 0x0405},
{0x2510, 0x2C40},
{0x2510, 0x2A54},
{0x2510, 0x0AFF},
{0x2510, 0x0A78},
{0x2510, 0x4538},
{0x2510, 0x5114},
{0x2510, 0x4000},
{0x2510, 0x0408},
{0x2510, 0x0104},
{0x2510, 0x0826},
{0x2510, 0x5208},
{0x2510, 0x1518},
{0x2510, 0x13C8},
{0x2510, 0x1002},
{0x2510, 0x1016},
{0x2510, 0x1181},
{0x2510, 0x1189},
{0x2510, 0x1056},
{0x2510, 0x1210},
{0x2510, 0x0902},
{0x2510, 0x0D09},
{0x2510, 0x0515},
{0x2510, 0x8813},
{0x2510, 0x8809},
{0x2510, 0x3811},
{0x2510, 0x9911},
{0x2510, 0xD909},
{0x2510, 0x1E12},
{0x2510, 0x1410},
{0x2510, 0xD609},
{0x2510, 0x0112},
{0x2510, 0x1012},
{0x2510, 0x1212},
{0x2510, 0x1011},
{0x2510, 0xDD11},
{0x2510, 0xD909},
{0x2510, 0x0114},
{0x2510, 0x4109},
{0x2510, 0x0410},
{0x2510, 0x5608},
{0x2510, 0x11DB},
{0x2510, 0x0903},
{0x2510, 0x11FB},
{0x2510, 0x11BB},
{0x2510, 0x121A},
{0x2510, 0x1210},
{0x2510, 0x0812},
{0x2510, 0x5010},
{0x2510, 0x7610},
{0x2510, 0xE614},
{0x2510, 0x6109},
{0x2510, 0x0612},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x1C14},
{0x2510, 0x6009},
{0x2510, 0x0C0B},
{0x2510, 0x0905},
{0x2510, 0x15C8},
{0x2510, 0x13C8},
{0x2510, 0x0810},
{0x2510, 0x6609},
{0x2510, 0x0B15},
{0x2510, 0x8813},
{0x2510, 0x8809},
{0x2510, 0x130C},
{0x2510, 0x1440},
{0x2510, 0x0903},
{0x2510, 0x10E6},
{0x2510, 0x11FB},
{0x2510, 0x1262},
{0x2510, 0x1260},
{0x2510, 0x11FF},
{0x2510, 0x11FB},
{0x2510, 0x1441},
{0x2510, 0x0902},
{0x2510, 0x1066},
{0x2510, 0x0912},
{0x2510, 0x11BB},
{0x2510, 0x1263},
{0x2510, 0x1260},
{0x2510, 0x1400},
{0x2510, 0x1518},
{0x2510, 0x11B8},
{0x2510, 0x12A0},
{0x2510, 0x1200},
{0x2510, 0x1026},
{0x2510, 0x1000},
{0x2510, 0x1300},
{0x2510, 0x1100},
{0x2510, 0x3053},
{0x2510, 0x4211},
{0x2510, 0x0010},
{0x2510, 0x0210},
{0x2510, 0x1611},
{0x2510, 0x0111},
{0x2510, 0x0910},
{0x2510, 0x5612},
{0x2510, 0x100D},
{0x2510, 0x0905},
{0x2510, 0x1441},
{0x2510, 0x0907},
{0x2510, 0x1440},
{0x2510, 0x0901},
{0x2510, 0x15C8},
{0x2510, 0x13C8},
{0x2510, 0x091A},
{0x2510, 0x1149},
{0x2510, 0x0908},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x091B},
{0x2510, 0x1159},
{0x2510, 0x090B},
{0x2510, 0x1214},
{0x2510, 0x0901},
{0x2510, 0x1210},
{0x2510, 0x10D6},
{0x2510, 0x1212},
{0x2510, 0x1210},
{0x2510, 0x115D},
{0x2510, 0x1159},
{0x2510, 0x1056},
{0x2510, 0x0903},
{0x2510, 0x115B},
{0x2510, 0x0814},
{0x2510, 0x4109},
{0x2510, 0x0114},
{0x2510, 0x4009},
{0x2510, 0x0C11},
{0x2510, 0x7B11},
{0x2510, 0x3B12},
{0x2510, 0x1A12},
{0x2510, 0x1009},
{0x2510, 0x0112},
{0x2510, 0x5010},
{0x2510, 0xF610},
{0x2510, 0xE614},
{0x2510, 0x6009},
{0x2510, 0x0115},
{0x2510, 0xA813},
{0x2510, 0xA812},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x2415},
{0x2510, 0x8809},
{0x2510, 0x0110},
{0x2510, 0x660B},
{0x2510, 0x0813},
{0x2510, 0x8809},
{0x2510, 0x250C},
{0x2510, 0x0902},
{0x2510, 0x1440},
{0x2510, 0x0907},
{0x2510, 0x10E6},
{0x2510, 0x1262},
{0x2510, 0x1260},
{0x2510, 0x117F},
{0x2510, 0x117B},
{0x2510, 0x1066},
{0x2510, 0x0906},
{0x2510, 0x1441},
{0x2510, 0x0901},
{0x2510, 0x1440},
{0x2510, 0x090D},
{0x2510, 0x113B},
{0x2510, 0x1263},
{0x2510, 0x1260},
{0x2510, 0x1400},
{0x2510, 0x1518},
{0x2510, 0x1138},
{0x2510, 0x12A0},
{0x2510, 0x1200},
{0x2510, 0x1026},
{0x2510, 0x1000},
{0x2510, 0x1300},
{0x2510, 0x1100},
{0x2510, 0x437A},
{0x2510, 0x0605},
{0x2510, 0x0741},
{0x2510, 0x0E02},
{0x2510, 0x3750},
{0x2510, 0x2C44},
{0x2510, 0x3714},
{0x2510, 0x4000},
{0x2510, 0x0408},
{0x2510, 0x0104},
{0x2510, 0x0811},
{0x2510, 0x0010},
{0x2510, 0x0210},
{0x2510, 0x1611},
{0x2510, 0x0111},
{0x2510, 0x0910},
{0x2510, 0x5612},
{0x2510, 0x100D},
{0x2510, 0x0906},
{0x2510, 0x1441},
{0x2510, 0x0907},
{0x2510, 0x1440},
{0x2510, 0x0901},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x0921},
{0x2510, 0x1149},
{0x2510, 0x0908},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x091B},
{0x2510, 0x1159},
{0x2510, 0x090B},
{0x2510, 0x1214},
{0x2510, 0x0901},
{0x2510, 0x1210},
{0x2510, 0x10D6},
{0x2510, 0x1212},
{0x2510, 0x1210},
{0x2510, 0x115D},
{0x2510, 0x1159},
{0x2510, 0x1056},
{0x2510, 0x0903},
{0x2510, 0x115B},
{0x2510, 0x0814},
{0x2510, 0x4109},
{0x2510, 0x0114},
{0x2510, 0x4009},
{0x2510, 0x0C11},
{0x2510, 0x7B11},
{0x2510, 0x3B12},
{0x2510, 0x1A12},
{0x2510, 0x1009},
{0x2510, 0x0112},
{0x2510, 0x5010},
{0x2510, 0xF610},
{0x2510, 0xE614},
{0x2510, 0x6009},
{0x2510, 0x0115},
{0x2510, 0xA813},
{0x2510, 0xA812},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x2415},
{0x2510, 0x8809},
{0x2510, 0x0110},
{0x2510, 0x660B},
{0x2510, 0x0813},
{0x2510, 0x8809},
{0x2510, 0x250C},
{0x2510, 0x0902},
{0x2510, 0x1440},
{0x2510, 0x0907},
{0x2510, 0x10E6},
{0x2510, 0x1262},
{0x2510, 0x1260},
{0x2510, 0x117F},
{0x2510, 0x117B},
{0x2510, 0x1066},
{0x2510, 0x0906},
{0x2510, 0x1441},
{0x2510, 0x0901},
{0x2510, 0x1440},
{0x2510, 0x090D},
{0x2510, 0x113B},
{0x2510, 0x1263},
{0x2510, 0x1260},
{0x2510, 0x1440},
{0x2510, 0x1598},
{0x2510, 0x1139},
{0x2510, 0x12A0},
{0x2510, 0x1200},
{0x2510, 0x1066},
{0x2510, 0x1066},
{0x2510, 0x1380},
{0x2510, 0x1109},
{0x2510, 0x0E02},
{0x2510, 0x0920},
{0x2510, 0x3708},
{0x2510, 0x0015},
{0x2510, 0x9813},
{0x2510, 0x9810},
{0x2510, 0x6610},
{0x2510, 0x6611},
{0x2510, 0x8911},
{0x2510, 0x8910},
{0x2510, 0x5612},
{0x2510, 0x1009},
{0x2510, 0x020D},
{0x2510, 0x0905},
{0x2510, 0x15A8},
{0x2510, 0x13A8},
{0x2510, 0x0934},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x1199},
{0x2510, 0x11D9},
{0x2510, 0x091E},
{0x2510, 0x1214},
{0x2510, 0x10D6},
{0x2510, 0x0901},
{0x2510, 0x1210},
{0x2510, 0x1212},
{0x2510, 0x1210},
{0x2510, 0x11DD},
{0x2510, 0x11D9},
{0x2510, 0x0901},
{0x2510, 0x1441},
{0x2510, 0x0904},
{0x2510, 0x1056},
{0x2510, 0x0811},
{0x2510, 0xDB09},
{0x2510, 0x0311},
{0x2510, 0xFB11},
{0x2510, 0xBB12},
{0x2510, 0x1A12},
{0x2510, 0x1008},
{0x2510, 0x1250},
{0x2510, 0x1076},
{0x2510, 0x10E6},
{0x2510, 0x1461},
{0x2510, 0x0906},
{0x2510, 0x1240},
{0x2510, 0x1260},
{0x2510, 0x091C},
{0x2510, 0x1460},
{0x2510, 0x090C},
{0x2510, 0x0B09},
{0x2510, 0x0515},
{0x2510, 0xC813},
{0x2510, 0xC808},
{0x2510, 0x1066},
{0x2510, 0x090B},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x0913},
{0x2510, 0x0C14},
{0x2510, 0x4009},
{0x2510, 0x0310},
{0x2510, 0xE611},
{0x2510, 0xFB12},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0xFF11},
{0x2510, 0xFB14},
{0x2510, 0x4109},
{0x2510, 0x0210},
{0x2510, 0x6609},
{0x2510, 0x1211},
{0x2510, 0xBB12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x1811},
{0x2510, 0xB812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x007A},
{0x2510, 0x0605},
{0x2510, 0x0807},
{0x2510, 0x0E02},
{0x2510, 0x3709},
{0x2510, 0x0655},
{0x2510, 0x2CFE},
{0x2510, 0x12FE},
{0x2510, 0x062C},

{0x1010, 0x0115},
{0x3236, 0x00b3},
{0x32e6, 0x009a},
{0x322e, 0x258c},
/* Sequencer_Update */

{0x32D0, 0x3A02},
{0x32D2, 0x3508},
{0x32D4, 0x3702},
{0x32D6, 0x3C04},
{0x32DC, 0x370A},
{ }
}; /* Sensor_Setup */

static const struct ar0147_reg ar0147_rev1_Serial_12_bit_Timing_Setup[] = {
#if 0
/* PCLK=24Mhz/3 *50 /1/8 = 50MHz */
{0x302A, 8}, // VT_PIX_CLK_DIV
{0x302C, 1}, // VT_SYS_CLK_DIV
{0x302E, 3}, // PRE_PLL_CLK_DIV
{0x3030, 50}, // PLL_MULTIPLIER
{0x3036, 8}, // OP_WORD_CLK_DIV
{0x3038, 1}, // OP_SYS_CLK_DIV
#else
/* PCLK=24Mhz/4 *75 /1/9 = 50MHz */
{0x302A, 9}, // VT_PIX_CLK_DIV
{0x302C, 1}, // VT_SYS_CLK_DIV
{0x302E, 4}, // PRE_PLL_CLK_DIV
{0x3030, 75}, // PLL_MULTIPLIER
{0x3036, 12}, // OP_WORD_CLK_DIV
{0x3038, 1}, // OP_SYS_CLK_DIV
#endif
{0x30B0, 0x980C}, // DIGITAL_TEST
{0x31DC, 0x1FB0},
{ }
}; /* Serial_12_bit_Timing_Setup */

static const struct ar0147_reg ar0147_rev1_Readout_Mode_Configuration[] = {
{0x30A2, 0x0001}, // X_ODD_INC_
{0x30A6, 0x0001}, // Y_ODD_INC_
{0x3040, 0x0000}, // READ_MODE
{0x3082, 0x0008}, // OPERATION_MODE_CTRL: 3exp
{0x3044, 0x0400}, // DARK_CONTROL
{0x3064, 0x0000}, // SMIA_TEST: disable emb data and stats
{0x33E0, 0x0C80}, // TEST_ASIL_ROWS
{0x3180, 0x0080}, // RESERVED_MFR_3180
{0x33E4, 0x0080}, // RESERVED_MFR_33E4
#ifdef AR0147_EMBEDDED_LINE
{0x3064, 0x0180}, // SMIA_TEST: enable emb data and stats
#endif /* HDR_Readout_Mode_Configuration */
{ }
}; /* Readout_Mode_Configuration */

static const struct ar0147_reg ar0147_rev1_Full_Res_FOV[] = {
{0x31B0, 0x0056}, // FRAME_PREAMBLE
{0x31B2, 0x0045}, // LINE_PREAMBLE
{0x3004, AR0147_X_START}, // X_ADDR_START_
{0x3008, AR0147_X_END}, // X_ADDR_END_
{0x3002, AR0147_Y_START}, // Y_ADDR_START_
{0x3006, AR0147_Y_END}, // Y_ADDR_END_
{0x3400, 0x10},
{0x3402, (0x8000 & 0) | AR0147_MAX_WIDTH}, // X_OUTPUT_CONTROL
{0x3404, (0x8000 & 0) | AR0147_MAX_HEIGHT}, // Y_OUTPUT_CONTROL
{ }
}; /* Full_Res_FOV */

static const struct ar0147_reg ar0147_rev1_3exp_30FPS_Timing_and_Exposure[] = {
{0x3082, 0x0008}, // OPERATION_MODE_CTRL: 3exp
{0x30BA, 0x1002}, // DIGITAL_CTRL: 3exp max
/* Row and Pixel Timing */
{0x300C, AR0147_SENSOR_WIDTH + 52}, // LINE_LENGTH_PCK_ (1396)
{0x300A, AR0147_SENSOR_HEIGHT + 226}, // FRAME_LENGTH_LINES_
{0x3042, 0x0000}, // EXTRA_DELAY
/* Exposure Settings */
{0x3238, 0x0222}, // EXPOSURE_RATIO
{0x3012, 0x0300}, // COARSE_INTEGRATION_TIME_

{0x3014, 1550}, // FINE_INTEGRATION_TIME_
{0x321E, 1550}, // FINE_INTEGRATION_TIME2
{0x3222, 1550}, // FINE_INTEGRATION_TIME3

{0x30B0, 0x980C}, // DIGITAL_TEST (MIPI ...)
{0x32EA, 0x3C0E},
{0x32EC, 0x72A1},
{0x3C06, 0x083C},
{0x3C08, 0x0100},
{ }
}; /* 3exp_30FPS_Timing_and_Exposure */

static const struct ar0147_reg ar0147_rev1_Serial_HDR_12_bit_Output[] = {
{0x31D0, 0x0001}, // COMPANDING
{0x31AE, 0x0304}, // SERIAL_FORMAT: HISPI 4-lanes
{0x31AC, 0x140C}, // DATA_FORMAT_BITS: ADC20, RAW12
//{0x301A, 0x0118}, // RESET_REGISTER
{0x301A, 0x0018}, // RESET_REGISTER
{ }
}; /* Serial_HDR_12_bit_Output */

static const struct ar0147_reg ar0147_rev1_MIPI_12_bit_450MBps_Settings[] = {
{0x31AE, 0x0204}, // SERIAL_FORMAT: MIPI 4-lanes
{0x3342, 0x122C}, // exposure1 DT=0x2c emb=0x12
{0x3346, 0x122C}, // exposure2 DT=0x2c emb=0x12
{0x334A, 0x122C}, // exposure3 DT=0x2c emb=0x12
{0x334E, 0x122C}, // exposure4 DT=0x2c emb=0x12
{0x3344, 0x0011}, // exposure1 VC=0
{0x3348, 0x0111}, // exposure1 VC=1
{0x334C, 0x0211}, // exposure1 VC=2
{0x3350, 0x0311}, // exposure1 VC=3
{0x31B0, 0x41}, // frame_preamble
{0x31B2, 0x2e}, // line_preamble

{0x31B4, 0x2185},
{0x31B6, 0x1105},
{0x31B8, 0x2047},
{0x31BA, 0x105},
{0x31BC, 0x704},
{ }
}; /* MIPI_12_bit_450MBps_Settings */

/* 3 Exp HDR, Full Resolution, MIPI 450MBps 4 lane 12-bit, 30FPS, XMCLK=24MHz */
static const struct ar0147_reg *ar0147_regs_hdr_mipi450mbps_12bit_30fps_rev1[] = {
	ar0147_rev1_Reset,
	ar0147_rev1_Sensor_Setup,
	ar0147_rev1_Serial_12_bit_Timing_Setup,
	ar0147_rev1_Readout_Mode_Configuration,
	ar0147_rev1_Full_Res_FOV,
	ar0147_rev1_3exp_30FPS_Timing_and_Exposure,
	ar0147_rev1_Serial_HDR_12_bit_Output,
	ar0147_rev1_MIPI_12_bit_450MBps_Settings,
	NULL
};
