/*
 * ON Semiconductor AR0147 sensor camera wizard 1344x968@30/BGGR/BT601/RAW12
 *
 * Copyright (C) 2019 Cogent Embedded, Inc.
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 */

static const struct ar0147_reg ar0147_rev3_Reset[] = {
{0x301A, 0x0001},	// reset
{AR0147_DELAY, 100},
{0x301A, 0x10D8},	// Stream off and setup parallel
{0x3070, 0x0001},
{0x3070, 0x0000},	//  1: Solid color test pattern,
			//  2: Full color bar test pattern,
			//  3: Fade to grey color bar test pattern,
			//256: Walking 1 test pattern (12 bit)
#ifdef AR0147_DISPLAY_PATTERN_FIXED
{0x3070, 0x0001},
#endif
{0x3072, 0x0fff},	// R
{0x3074, 0x0fff},	// G(GR row)
{0x3076, 0x0fff},	// B
{0x3078, 0x0fff},	// G(GB row)
#ifdef AR0147_DISPLAY_PATTERN_COLOR_BAR
{0x3070, 0x0002},
#endif
{AR0147_DELAY, 250},
{ }
}; /* Reset */

static const struct ar0147_reg ar0147_rev3_Sensor_Setup[] = {
/* Recommended_Settings */
{0x3500, 0x0100},
{AR0147_DELAY, 1},
{0x30B0, 0x980E}, // DIGITAL_TEST
{0x3C08, 0x0000},
{0x3C0C, 0x0518}, // DELAY_BUFFER_LLPCK_RD_WR_OVERLAP
{0x3092, 0x1A24},
{0x30B4, 0x01C7}, // TEMPSENS0_CTRL_REG
{0x3372, 0x700F}, // DBLC_FS0_CONTROL
{0x33EE, 0x0344},
{0x350C, 0x035A},
{0x350E, 0x0514},
{0x3518, 0x14FE},
{0x351A, 0x6000},
{0x3520, 0x08CC},
{0x3522, 0xCC08},
{0x3524, 0x0C00},
{0x3526, 0x0F00},
{0x3528, 0xEEEE},
{0x352A, 0x089F},
{0x352C, 0x0012},
{0x352E, 0x00EE},
{0x3530, 0xEE00},
{0x3536, 0xFF20},
{0x3538, 0x3CFF},
{0x353A, 0x9000},
{0x353C, 0x7F00},
{0x3540, 0xC62C},
{0x3542, 0x4B4B},
{0x3544, 0x3C46},
{0x3546, 0x5A5A},
{0x3548, 0x6400},
{0x354A, 0x007F},
{0x3556, 0x1010},
{0x3566, 0x7328},
{0x3F90, 0x0800}, // TEMPVSENS0_TMG_CTRL
{0x3510, 0x011F},
{0x353E, 0x801F},
{0x3F9A, 0x0001}, // TEMPVSENS0_BOOST_SAMP_CTRL
{0x3116, 0x0001}, // HDR_CONTROL3
{0x3102, 0x60A0},
{0x3104, 0x60A0},
{0x3106, 0x60A0},
{0x3362, 0x0000}, // DC_GAIN
{0x3366, 0xCCCC}, // ANALOG_GAIN

// Corrects defect tagged pixels
{0x31E0, 0x0003},

// Writes to bitfield R0x3552[5:4].
// Be sure not to overwrite the other bitfields in this register.
{0x3552, 0x0FB0},
/* Recommended_Settings */

/* Sequencer_Update */
{0x2512, 0x8000},
{0x2510, 0x0901},
{0x2510, 0x3350},
{0x2510, 0x2004},
{0x2510, 0x1420},
{0x2510, 0x1578},
{0x2510, 0x087B},
{0x2510, 0x24FF},
{0x2510, 0x24FF},
{0x2510, 0x24EA},
{0x2510, 0x2410},
{0x2510, 0x2224},
{0x2510, 0x1015},
{0x2510, 0xD813},
{0x2510, 0x0214},
{0x2510, 0x0024},
{0x2510, 0xFF24},
{0x2510, 0xFF24},
{0x2510, 0xEA23},
{0x2510, 0x2464},
{0x2510, 0x7A24},
{0x2510, 0x0405},
{0x2510, 0x2C40},
{0x2510, 0x0AFF},
{0x2510, 0x0A78},
{0x2510, 0x3851},
{0x2510, 0x2A54},
{0x2510, 0x1440},
{0x2510, 0x0015},
{0x2510, 0x0804},
{0x2510, 0x0801},
{0x2510, 0x0408},
{0x2510, 0x2652},
{0x2510, 0x0813},
{0x2510, 0xC810},
{0x2510, 0x0210},
{0x2510, 0x1611},
{0x2510, 0x8111},
{0x2510, 0x8910},
{0x2510, 0x5612},
{0x2510, 0x1009},
{0x2510, 0x020D},
{0x2510, 0x0903},
{0x2510, 0x1402},
{0x2510, 0x15A8},
{0x2510, 0x1388},
{0x2510, 0x0938},
{0x2510, 0x1199},
{0x2510, 0x11D9},
{0x2510, 0x091E},
{0x2510, 0x1214},
{0x2510, 0x10D6},
{0x2510, 0x0901},
{0x2510, 0x1210},
{0x2510, 0x1212},
{0x2510, 0x1210},
{0x2510, 0x11DD},
{0x2510, 0x11D9},
{0x2510, 0x0901},
{0x2510, 0x1441},
{0x2510, 0x0904},
{0x2510, 0x1056},
{0x2510, 0x0811},
{0x2510, 0xDB09},
{0x2510, 0x0311},
{0x2510, 0xFB11},
{0x2510, 0xBB12},
{0x2510, 0x1A12},
{0x2510, 0x1008},
{0x2510, 0x1250},
{0x2510, 0x0B10},
{0x2510, 0x7610},
{0x2510, 0xE614},
{0x2510, 0x6109},
{0x2510, 0x0612},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x1C14},
{0x2510, 0x6009},
{0x2510, 0x1215},
{0x2510, 0xC813},
{0x2510, 0xC808},
{0x2510, 0x1066},
{0x2510, 0x090B},
{0x2510, 0x1588},
{0x2510, 0x1388},
{0x2510, 0x0913},
{0x2510, 0x0C14},
{0x2510, 0x4009},
{0x2510, 0x0310},
{0x2510, 0xE611},
{0x2510, 0xFB12},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0xFF11},
{0x2510, 0xFB14},
{0x2510, 0x4109},
{0x2510, 0x0210},
{0x2510, 0x6609},
{0x2510, 0x1211},
{0x2510, 0xBB12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x1811},
{0x2510, 0xB812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x0030},
{0x2510, 0x5342},
{0x2510, 0x1100},
{0x2510, 0x1002},
{0x2510, 0x1016},
{0x2510, 0x1101},
{0x2510, 0x1109},
{0x2510, 0x1056},
{0x2510, 0x1210},
{0x2510, 0x0D09},
{0x2510, 0x0314},
{0x2510, 0x0214},
{0x2510, 0x4309},
{0x2510, 0x0514},
{0x2510, 0x4009},
{0x2510, 0x0115},
{0x2510, 0xC813},
{0x2510, 0xC809},
{0x2510, 0x1A11},
{0x2510, 0x4909},
{0x2510, 0x0815},
{0x2510, 0x8813},
{0x2510, 0x8809},
{0x2510, 0x1B11},
{0x2510, 0x5909},
{0x2510, 0x0B12},
{0x2510, 0x1409},
{0x2510, 0x0112},
{0x2510, 0x1010},
{0x2510, 0xD612},
{0x2510, 0x1212},
{0x2510, 0x1011},
{0x2510, 0x5D11},
{0x2510, 0x5910},
{0x2510, 0x5609},
{0x2510, 0x0311},
{0x2510, 0x5B08},
{0x2510, 0x1441},
{0x2510, 0x0901},
{0x2510, 0x1440},
{0x2510, 0x090C},
{0x2510, 0x117B},
{0x2510, 0x113B},
{0x2510, 0x121A},
{0x2510, 0x1210},
{0x2510, 0x0901},
{0x2510, 0x1250},
{0x2510, 0x10F6},
{0x2510, 0x10E6},
{0x2510, 0x1460},
{0x2510, 0x0901},
{0x2510, 0x15A8},
{0x2510, 0x13A8},
{0x2510, 0x1240},
{0x2510, 0x1260},
{0x2510, 0x0924},
{0x2510, 0x1588},
{0x2510, 0x0901},
{0x2510, 0x1066},
{0x2510, 0x0B08},
{0x2510, 0x1388},
{0x2510, 0x0925},
{0x2510, 0x0C09},
{0x2510, 0x0214},
{0x2510, 0x4009},
{0x2510, 0x0710},
{0x2510, 0xE612},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0x7F11},
{0x2510, 0x7B10},
{0x2510, 0x6609},
{0x2510, 0x0614},
{0x2510, 0x4109},
{0x2510, 0x0114},
{0x2510, 0x4009},
{0x2510, 0x0D11},
{0x2510, 0x3B12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x1811},
{0x2510, 0x3812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x0043},
{0x2510, 0x7A06},
{0x2510, 0x0507},
{0x2510, 0x410E},
{0x2510, 0x0237},
{0x2510, 0x502C},
{0x2510, 0x4414},
{0x2510, 0x4000},
{0x2510, 0x1508},
{0x2510, 0x0408},
{0x2510, 0x0104},
{0x2510, 0x0826},
{0x2510, 0x5508},
{0x2510, 0x13C8},
{0x2510, 0x1002},
{0x2510, 0x1016},
{0x2510, 0x1181},
{0x2510, 0x1189},
{0x2510, 0x1056},
{0x2510, 0x1210},
{0x2510, 0x0902},
{0x2510, 0x0D09},
{0x2510, 0x0314},
{0x2510, 0x0215},
{0x2510, 0xA813},
{0x2510, 0xA814},
{0x2510, 0x0309},
{0x2510, 0x0614},
{0x2510, 0x0209},
{0x2510, 0x1F15},
{0x2510, 0x8813},
{0x2510, 0x8809},
{0x2510, 0x0B11},
{0x2510, 0x9911},
{0x2510, 0xD909},
{0x2510, 0x1E12},
{0x2510, 0x1409},
{0x2510, 0x0312},
{0x2510, 0x1012},
{0x2510, 0x1212},
{0x2510, 0x1011},
{0x2510, 0xDD11},
{0x2510, 0xD909},
{0x2510, 0x0114},
{0x2510, 0x4009},
{0x2510, 0x0711},
{0x2510, 0xDB09},
{0x2510, 0x0311},
{0x2510, 0xFB11},
{0x2510, 0xBB12},
{0x2510, 0x1A12},
{0x2510, 0x1009},
{0x2510, 0x0112},
{0x2510, 0x500B},
{0x2510, 0x1076},
{0x2510, 0x1066},
{0x2510, 0x1460},
{0x2510, 0x0901},
{0x2510, 0x15C8},
{0x2510, 0x0901},
{0x2510, 0x1240},
{0x2510, 0x1260},
{0x2510, 0x0901},
{0x2510, 0x13C8},
{0x2510, 0x0956},
{0x2510, 0x1588},
{0x2510, 0x0901},
{0x2510, 0x0C14},
{0x2510, 0x4009},
{0x2510, 0x0511},
{0x2510, 0xFB12},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0xFF11},
{0x2510, 0xFB09},
{0x2510, 0x1911},
{0x2510, 0xBB12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x1811},
{0x2510, 0xB812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x0030},
{0x2510, 0x5345},
{0x2510, 0x1444},
{0x2510, 0x1002},
{0x2510, 0x1016},
{0x2510, 0x1101},
{0x2510, 0x1109},
{0x2510, 0x1056},
{0x2510, 0x1210},
{0x2510, 0x0D09},
{0x2510, 0x0314},
{0x2510, 0x0614},
{0x2510, 0x4709},
{0x2510, 0x0514},
{0x2510, 0x4409},
{0x2510, 0x0115},
{0x2510, 0x9813},
{0x2510, 0x9809},
{0x2510, 0x1A11},
{0x2510, 0x4909},
{0x2510, 0x0815},
{0x2510, 0x8813},
{0x2510, 0x8809},
{0x2510, 0x1B11},
{0x2510, 0x5909},
{0x2510, 0x0B12},
{0x2510, 0x1409},
{0x2510, 0x0112},
{0x2510, 0x1009},
{0x2510, 0x0112},
{0x2510, 0x1212},
{0x2510, 0x1011},
{0x2510, 0x5D11},
{0x2510, 0x5909},
{0x2510, 0x0511},
{0x2510, 0x5B09},
{0x2510, 0x1311},
{0x2510, 0x7B11},
{0x2510, 0x3B12},
{0x2510, 0x1A12},
{0x2510, 0x1009},
{0x2510, 0x0112},
{0x2510, 0x5010},
{0x2510, 0x7610},
{0x2510, 0x6614},
{0x2510, 0x6409},
{0x2510, 0x0115},
{0x2510, 0xA813},
{0x2510, 0xA812},
{0x2510, 0x4012},
{0x2510, 0x6009},
{0x2510, 0x2015},
{0x2510, 0x8809},
{0x2510, 0x020B},
{0x2510, 0x0901},
{0x2510, 0x1388},
{0x2510, 0x0925},
{0x2510, 0x0C09},
{0x2510, 0x0214},
{0x2510, 0x4409},
{0x2510, 0x0912},
{0x2510, 0x6212},
{0x2510, 0x6011},
{0x2510, 0x7F11},
{0x2510, 0x7B09},
{0x2510, 0x1C11},
{0x2510, 0x3B12},
{0x2510, 0x6312},
{0x2510, 0x6014},
{0x2510, 0x0015},
{0x2510, 0x1811},
{0x2510, 0x3812},
{0x2510, 0xA012},
{0x2510, 0x0010},
{0x2510, 0x2610},
{0x2510, 0x0013},
{0x2510, 0x0011},
{0x2510, 0x0008},
{0x2510, 0x7A06},
{0x2510, 0x0508},
{0x2510, 0x070E},
{0x2510, 0x0237},
{0x2510, 0x502C},
{0x2510, 0xFE32},
{0x2510, 0xFE06},
{0x2510, 0x2C2C},

{AR0147_DELAY, 200},

{0x32e6, 0x009a}, //min_subrow
{0x322e, 0x258c}, //clks_per_sample 396
/* Sequencer_Update */

{0x32D0, 0x3A02},
{0x32D2, 0x3508},
{0x32D4, 0x3702},
{0x32D6, 0x3C04},
{0x32DC, 0x370A},
{0x32EA, 0x3CA8},
{0x351E, 0x0000},
{0x3510, 0x811F},

//settings to rev1 default for non-Super Exposure mode settings
//Super Exposure mode settings have additional settings
{0x1010, 0x0155}, // FINE_INTEGRATION_TIME4_MIN
{0x3236, 0x00B2}, // FINE_CORRECTION4
{0x32EA, 0x3C0E},
{0x32EC, 0x7151},
{0x3116, 0x0001}, // HDR_CONTROL3
{0x33E2, 0x0000}, // SAMPLE_CTRL
{0x3088, 0x0400}, // LFM_CTRL
{0x322A, 0x0039}, // FINE_INTEGRATION_CTRL
{0x3238, 0x0333}, // EXPOSURE_RATIO
{ }
}; /* Sensor_Setup */

static const struct ar0147_reg ar0147_rev3_Super_Exposure_Mode_1_Setup[] = {
{0x3082, 0x0004}, // OPERATION_MODE_CTRL
{0x30BA, 0x1002}, // DIGITAL_CTRL
{0x3C06, 0x000C}, //
{0x3C08, 0x1100}, //
{0x3116, 0x0000}, // HDR_CONTROL3
{0x3088, 0x0480}, //
{0x3510, 0x814F}, //
{0x351E, 0x0100}, //
{0x32EA, 0x3CA9}, //
{0x32EC, 0x7281}, //
{0x3212, 0x0000}, // COARSE_INTEGRATION_TIME2
{0x3238, 0x8222}, // EXPOSURE_RATIO
{0x33E2, 0x0910}, // SAMPLE_CTRL
{0x3362, 0x0001}, // DC_GAIN
{0x322A, 0x0539}, // FINE_INTEGRATION_CTRL
{0x3014, 0x0137}, // FINE_INTEGRATION_TIME_
{0x1008, 0x0137}, // FINE_INTEGRATION_TIME_MIN
{0x3230, 0x00DB}, // FINE_CORRECTION
{0x32D0, 0x3A02}, //
{0x32D2, 0x3508}, //
{0x32D4, 0x3702}, //
{0x32D6, 0x3C04}, //
{0x32DC, 0x370A}, //
{0x3528, 0x99EE}, //
{0x30FE, 0x0040}, // NOISE_PEDESTAL
{0x3782, 0x0000}, //
{ }
}; /* Super_Exposure_Mode_1_Setup */

static const struct ar0147_reg ar0147_rev3_Super_Exposure_Plus_T2_Mode_1_Setup[] = {
{0x3C06, 0x2024}, // CONFIGURE_BUFFERS1
{0x3C08, 0x2100}, // CONFIGURE_BUFFERS2
{0x3088, 0x0400},
{0x32EC, 0x7281},
{0x33E2, 0x0A10},
{0x322A, 0x0539}, // FINE_INTEGRATION_CTRL
{0x1008, 0x0137}, // FINE_INTEGRATION_TIME_MIN
{0x100E, 0x044F}, // FINE_INTEGRATION_TIME3_MIN
{0x3230, 0x00DB}, // FINE_CORRECTION
{0x3234, 0x03F3}, // FINE_CORRECTION3
{0x30FE, 0x0040}, // NOISE_PEDESTAL
{0x3372, 0xF40F}, // DBLC_FS0_CONTROL
{0x3180, 0x0188},
{0x3108, 0x0CB1},
{0x3280, 0x0CB2}, // T1_BARRIER_C0
{0x3282, 0x0CB2}, // T1_BARRIER_C1
{0x3284, 0x0CB2}, // T1_BARRIER_C2
{0x3286, 0x0CB2}, // T1_BARRIER_C3
{0x3288, 0x0CB2}, // T2_BARRIER_C0
{0x328A, 0x0CB2}, // T2_BARRIER_C1
{0x328C, 0x0CB2}, // T2_BARRIER_C2
{0x328E, 0x0CB2}, // T2_BARRIER_C3
{0x3290, 0x0CB2}, // T3_BARRIER_C0
{0x3292, 0x0CB2}, // T3_BARRIER_C1
{0x3294, 0x0CB2}, // T3_BARRIER_C2
{0x3296, 0x0CB2}, // T3_BARRIER_C3
{0x3298, 0x0ED8}, // T4_BARRIER_C0
{0x329A, 0x0ED8}, // T4_BARRIER_C1
{0x329C, 0x0ED8}, // T4_BARRIER_C2
{0x329E, 0x0ED8}, // T4_BARRIER_C3
{0x32F6, 0x3A01},
{0x32D2, 0x200A},
{0x32D0, 0x3005},
{0x32D4, 0x3505},
{0x32F8, 0x3C03},
{0x32DC, 0x220C},
{0x32D6, 0x3207},
{0x32E2, 0x3707},
{0x3260, 0x00FF},
{0x3262, 0x00FF},
{0x32EA, 0x3CA9},
{0x3250, 0x0005},
{0x3256, 0x03E8},
{0x3258, 0x0300},
{0x325A, 0x0A13},
{0x325E, 0x0186},
{0x3252, 0x0107},
{0x325E, 0x0186},
{0x3096, 0x0000},
{0x3372, 0xF50F}, // DBLC_FS0_CONTROL
{0x337A, 0x100E}, // DBLC_SCALE0
{0x3504, 0x9100},
{0x350C, 0x034A},
{0x350E, 0x051C},
{0x3510, 0x9753},
{0x351E, 0x0100},
{0x3520, 0x0800},
{0x3522, 0x0008},
{0x3524, 0x0C00},
{0x3526, 0x0F00},
{0x3528, 0xDDDD},
{0x352A, 0x089F},
{0x352C, 0x0012},
{0x352E, 0x00FF},
{0x3530, 0xFF00},
{0x3532, 0x8F48},
{0x3536, 0xFF38},
{0x3538, 0x24FF},
{0x353A, 0x9000},
{0x353C, 0x7F00},
{0x353E, 0x801F},
{0x3540, 0xC62C},
{0x3542, 0x4B4B},
{0x3544, 0x4B46},
{0x3546, 0x5A5A},
{0x3548, 0x6400},
{0x354A, 0x007F},
{0x354E, 0x1480},
{0x3554, 0x1599},
{0x355A, 0x0B0E},

/* Digital Lateral Overflow for SE Mode 1 */
{0x3116, 0x0001},
{0x3100, 0xC001}, // FIELD_WR= DLO_CONTROL0, 0xE001
{0x3102, 0x6100},
{0x3104, 0x6100},
{0x3106, 0x6100},
{0x3108, 0x0CB1},
{0x312A, 0x83E8},
{0x3C82, 0x0FFF},
/* Digital Lateral Overflow for SE Mode 1 */
{ }
}; /* Super_Exposure_Plus_T2_Mode_1_Setup */

static const struct ar0147_reg ar0147_rev3_Super_Exposure_Plus_T2_Mode_2_Setup[] = {
{0x3C06, 0x141C},
{0x3C08, 0x2114},
{0x3088, 0x0400},
{0x32EC, 0x7101},
{0x33E2, 0x0530},
{0x322A, 0x0939}, // FINE_INTEGRATION_CTRL
{0x1008, 0x0271}, // FINE_INTEGRATION_TIME_MIN
{0x1010, 0x0129}, // FINE_INTEGRATION_TIME4_MIN
{0x3230, 0x020F}, // FINE_CORRECTION
{0x3236, 0x00C7}, // FINE_CORRECTION4
{0x30FE, 0x0040}, // NOISE_PEDESTAL
{0x3372, 0xF40F}, // DBLC_FS0_CONTROL
{0x3180, 0x0188},
{0x3108, 0x0CB1},
{0x3280, 0x0CB2}, // T1_BARRIER_C0
{0x3282, 0x0CB2}, // T1_BARRIER_C1
{0x3284, 0x0CB2}, // T1_BARRIER_C2
{0x3286, 0x0CB2}, // T1_BARRIER_C3
{0x3288, 0x0226}, // T2_BARRIER_C0
{0x328A, 0x0226}, // T2_BARRIER_C1
{0x328C, 0x0226}, // T2_BARRIER_C2
{0x328E, 0x0226}, // T2_BARRIER_C3
{0x3290, 0x0CB2}, // T3_BARRIER_C0
{0x3292, 0x0CB2}, // T3_BARRIER_C1
{0x3294, 0x0CB2}, // T3_BARRIER_C2
{0x3296, 0x0CB2}, // T3_BARRIER_C3
{0x3298, 0x0ED8}, // T4_BARRIER_C0
{0x329A, 0x0ED8}, // T4_BARRIER_C1
{0x329C, 0x0ED8}, // T4_BARRIER_C2
{0x329E, 0x0ED8}, // T4_BARRIER_C3
{0x32F6, 0x3A01},
{0x32D2, 0x200A},
{0x32D0, 0x3005},
{0x32D4, 0x3505},
{0x32F8, 0x3C03},
{0x32DC, 0x220C},
{0x32D6, 0x3207},
{0x32E2, 0x3707},
{0x3260, 0x00FF},
{0x3262, 0x00FF},
{0x32EA, 0x3C69},
{0x3250, 0x0005},
{0x3256, 0x03E8},
{0x3258, 0x0300},
{0x325A, 0x0A13},
{0x325E, 0x0186},
{0x3252, 0x0107},
{0x325E, 0x0186},
{0x3752, 0x0000},
{0x3372, 0xF50F}, // DBLC_FS0_CONTROL
{0x337A, 0x100E}, // DBLC_SCALE0
{0x3504, 0x9100},
{0x350C, 0x034A},
{0x350E, 0x051C},
{0x3510, 0x9753},
{0x351E, 0x0100},
{0x3520, 0x0800},
{0x3522, 0x0008},
{0x3524, 0x0C00},
{0x3526, 0x0F00},
{0x3528, 0xDDDD},
{0x352A, 0x089F},
{0x352C, 0x0012},
{0x352E, 0x00FF},
{0x3530, 0xFF00},
{0x3532, 0x8F08},
{0x3536, 0xFF38},
{0x3538, 0x24FF},
{0x353A, 0x9000},
{0x353C, 0x7F00},
{0x353E, 0x801F},
{0x3540, 0xC62C},
{0x3542, 0x4B4B},
{0x3544, 0x4B46},
{0x3546, 0x5A5A},
{0x3548, 0x6400},
{0x354A, 0x007F},
{0x354E, 0x1480},
{0x3554, 0x1599},
{0x355A, 0x0B0E},
{0x3364, 0x0004},
{0x3F72, 0x0A08}, // GCF_TRIM_0
{0x3F74, 0x40E8}, // GCF_TRIM_1
{0x3F76, 0x0E09}, // GCF_TRIM_2
{0x3F78, 0x0210}, // GCF_TRIM_3

/* Digital Lateral Overflow for SE Mode 2 */
{0x3116, 0x0001},
{0x3100, 0xC003}, // DLO_CONTROL0
{0x3102, 0x8FA0}, // DLO_CONTROL1
{0x3104, 0x8FA0}, // DLO_CONTROL2
{0x3106, 0x8FA0}, // DLO_CONTROL3
{0x312A, 0x83E8}, // HDR_SE_CONTROL0
{0x3C82, 0x4FFF}, // HDR_SE_CONTROL1[]
/* Digital Lateral Overflow for SE Mode 2 */
{ }
}; /* Super_Exposure_Plus_T2_Mode_2_Setup */

static const struct ar0147_reg ar0147_rev3_Serial_12_bit_Timing_Setup[] = {
#if 0
/* PCLK=24Mhz/3 *50 /1/8 = 50MHz */
{0x302A, 8}, // VT_PIX_CLK_DIV
{0x302C, 1}, // VT_SYS_CLK_DIV
{0x302E, 3}, // PRE_PLL_CLK_DIV
{0x3030, 50}, // PLL_MULTIPLIER
{0x3036, 8}, // OP_WORD_CLK_DIV
{0x3038, 1}, // OP_SYS_CLK_DIV
#else
/* PCLK=24Mhz/4 *75 /1/9 = 50MHz */
{0x302A, 9}, // VT_PIX_CLK_DIV
{0x302C, 1}, // VT_SYS_CLK_DIV
{0x302E, 4}, // PRE_PLL_CLK_DIV
{0x3030, 75}, // PLL_MULTIPLIER
{0x3036, 12}, // OP_WORD_CLK_DIV
{0x3038, 1}, // OP_SYS_CLK_DIV
#endif
{0x30B0, 0x980C}, // DIGITAL_TEST
{0x31DC, 0x1FB0},
{ }
}; /* Serial_12_bit_Timing_Setup */

static const struct ar0147_reg ar0147_rev3_Readout_Mode_Configuration[] = {
{0x30A2, 0x0001}, // X_ODD_INC_
{0x30A6, 0x0001}, // Y_ODD_INC_
{0x3040, 0x0000}, // READ_MODE
{0x3082, 0x0008}, // OPERATION_MODE_CTRL: 3exp
{0x3044, 0x0400}, // DARK_CONTROL
{0x3064, 0x0000}, // SMIA_TEST: disable emb data and stats
{0x33E0, 0x0C80}, // TEST_ASIL_ROWS
{0x3180, 0x0080}, // RESERVED_MFR_3180
{0x33E4, 0x0080}, // RESERVED_MFR_33E4
#ifdef AR0147_EMBEDDED_LINE
{0x3064, 0x0180}, // SMIA_TEST: enable emb data and stats
#endif
{ }
}; /* Readout_Mode_Configuration */

static const struct ar0147_reg ar0147_rev3_Full_Res_FOV[] = {
{0x31B0, 0x0056}, // FRAME_PREAMBLE
{0x31B2, 0x0045}, // LINE_PREAMBLE
{0x3004, AR0147_X_START}, // X_ADDR_START_
{0x3008, AR0147_X_END}, // X_ADDR_END_
{0x3002, AR0147_Y_START}, // Y_ADDR_START_
{0x3006, AR0147_Y_END}, // Y_ADDR_END_
{0x3400, 0x10},
{0x3402, (0x8000 & 0) | AR0147_MAX_WIDTH}, // X_OUTPUT_CONTROL
{0x3404, (0x8000 & 0) | AR0147_MAX_HEIGHT}, // Y_OUTPUT_CONTROL
{ }
}; /* Full_Res_FOV */

static const struct ar0147_reg ar0147_rev3_3exp_30FPS_Timing_and_Exposure[] = {
{0x3082, 0x0008}, // OPERATION_MODE_CTRL: 3exp
{0x30BA, 0x1002}, // DIGITAL_CTRL: 3exp max

/* Row and Pixel Timing */
{0x300C, AR0147_SENSOR_WIDTH + 52}, // LINE_LENGTH_PCK_ (1396)
{0x300A, AR0147_SENSOR_HEIGHT + 226}, // FRAME_LENGTH_LINES_
{0x3042, 0x0000}, // EXTRA_DELAY

/* Exposure Settings */
{0x3238, 0x0222}, // EXPOSURE_RATIO
{0x3012, 0x0300}, // COARSE_INTEGRATION_TIME_

{0x3014, 1550}, // FINE_INTEGRATION_TIME_
{0x321E, 1550}, // FINE_INTEGRATION_TIME2
{0x3222, 1550}, // FINE_INTEGRATION_TIME3
{0x30B0, 0x980C}, // DIGITAL_TEST (MIPI ...)
{0x32EA, 0x3C0E},
{0x32EC, 0x72A1},
{0x3362, 0x0000}, // DC_GAIN
{0x3366, 0xCCCC}, // ANALOG_GAIN
{0x3364, 0x01CF}, // DCG_TRIM
{0x3C06, 0x083C},
{0x3C08, 0x0100},
{ }
}; /* 3exp_30FPS_Timing_and_Exposure */

static const struct ar0147_reg ar0147_rev3_SE_Mode_1_30FPS_Timing_and_Exposure[] = {
{0x3082, 0x0004}, // OPERATION_MODE_CTRL: 2exp
{0x30BA, 0x1002}, // DIGITAL_CTRL: 3exp max

/* Row and Pixel Timing */
{0x300C, AR0147_SENSOR_WIDTH + 52}, // LINE_LENGTH_PCK_ (1396)
{0x300A, AR0147_SENSOR_HEIGHT + 226}, // FRAME_LENGTH_LINES_
{0x3042, 0x0000}, // EXTRA_DELAY

/* Exposure Settings */
{0x3238, 0x8222}, // EXPOSURE_RATIO: separate integartion time!?
{0x3012, 0x0300}, // COARSE_INTEGRATION_TIME_

{0x322A, 0x0139}, // FINE_INTEGRATION_CTRL
{0x3014, 0x0123}, // FINE_INTEGRATION_TIME_
{0x3362, 0x0001}, // DC_GAIN
{0x3366, 0xFFF7}, // ANALOG_GAIN

{0x30B0, 0x980C}, // DIGITAL_TEST (MIPI ...)
{0x32EC, 0x7281},
{ }
}; /* SE_Mode_1_30FPS_Timing_and_Exposure */

static const struct ar0147_reg ar0147_rev3_SE_Plus_T2_Mode_1_30FPS_Timing_and_Exposure[] = {
{0x3082, 0x0008}, // OPERATION_MODE_CTRL: 3exp
{0x30BA, 0x1003}, // DIGITAL_CTRL: 4exp max

/* Row and Pixel Timing */
{0x300C, AR0147_SENSOR_WIDTH + 52}, // LINE_LENGTH_PCK_ (1396)
{0x300A, AR0147_SENSOR_HEIGHT + 226}, // FRAME_LENGTH_LINES_
{0x3042, 0x0000}, // EXTRA_DELAY

/* Exposure Settings */
{0x3238, 0x8222}, // EXPOSURE_RATIO: separate integartion time!?
{0x3012, 0x0300}, // COARSE_INTEGRATION_TIME_

{0x322A, 0x0539}, // FINE_INTEGRATION_CTRL
{0x3014, 0x0137}, // FINE_INTEGRATION_TIME_
{0x3222, 0x0926}, // FINE_INTEGRATION_TIME3
{0x3362, 0x0001}, // DC_GAIN
{0x3366, 0xFDF7}, // ANALOG_GAIN

{0x30B0, 0x980C}, // DIGITAL_TEST (MIPI ...)
{0x32EC, 0x7281},
{ }
}; /* SE_Plus_T2_Mode_1_30FPS_Timing_and_Exposure */

static const struct ar0147_reg ar0147_rev3_SE_Plus_T2_Mode_2_50MHz_29FPS_Timing_and_Exposure[] = {
{0x3082, 0x000C}, // OPERATION_MODE_CTRL: 3exp
{0x30BA, 0x1003}, // DIGITAL_CTRL: 4exp max

/* Row and Pixel Timing */
{0x300C, AR0147_SENSOR_WIDTH + 326}, // LINE_LENGTH_PCK_ (1670)
{0x300A, AR0147_SENSOR_HEIGHT + 30}, // FRAME_LENGTH_LINES_
{0x3042, 0x0000}, // EXTRA_DELAY

/* Exposure Settings */
{0x3012, 0x0300}, // COARSE_INTEGRATION_TIME_
{0x321A, 12},     // COARSE_INTEGRATION_TIME4_
{0x3238, 0x8222}, // EXPOSURE_RATIO: separate integartion time!?

{0x322A, 0x0939}, // FINE_INTEGRATION_CTRL
{0x3014, 0x0271}, // FINE_INTEGRATION_TIME_
{0x3226, 0x0594}, // FINE_INTEGRATION_TIME4
{0x3362, 0x0D02}, // DC_GAIN
{0x3366, 0xDE79}, // ANALOG_GAIN

{0x30B0, 0x980C}, // DIGITAL_TEST (MIPI ...)
{0x32EC, 0x7101},
{0x33E0, 0x0080}, // TEST_ASIL_ROWS
{ }
}; /* SE_Plus_T2_Mode_2_30FPS_Timing_and_Exposure */

static const struct ar0147_reg ar0147_rev3_Serial_4_Lane_16_to_12_bit_Output[] = {
{0x31D0, 0x0001}, // COMPANDING
{0x31AE, 0x0304}, // SERIAL_FORMAT: HISPI 4-lanes
{0x31AC, 0x100C}, // DATA_FORMAT_BITS: ADC16, RAW12
//{0x301A, 0x0118}, // RESET_REGISTER
{0x301A, 0x0018}, // RESET_REGISTER (MIPI)
//{0x301A, 0x11d8}, // RESET_REGISTER (DVP)
{ }
}; /* Serial_4_Lane_16_to_12_bit_Output */

static const struct ar0147_reg ar0147_rev3_Serial_4_Lane_20_to_12_bit_Output[] = {
{0x31D0, 0x0001}, // COMPANDING
{0x31AE, 0x0304}, // SERIAL_FORMAT: HISPI 4-lanes
{0x31AC, 0x140C}, // DATA_FORMAT_BITS: ADC20, RAW12
//{0x301A, 0x0118}, // RESET_REGISTER
{0x301A, 0x0018}, // RESET_REGISTER (MIPI)
//{0x301A, 0x11d8}, // RESET_REGISTER (DVP)
{ }
}; /* Serial_4_Lane_20_to_12_bit_Output */

static const struct ar0147_reg ar0147_rev3_MIPI_12_bit_450MBps_Settings[] = {
{0x31AE, 0x0204}, // SERIAL_FORMAT: MIPI 4-lanes
{0x3342, 0x122C}, // exposure1 DT=0x2c emb=0x12
{0x3346, 0x122C}, // exposure2 DT=0x2c emb=0x12
{0x334A, 0x122C}, // exposure3 DT=0x2c emb=0x12
{0x334E, 0x122C}, // exposure4 DT=0x2c emb=0x12
{0x3344, 0x0011}, // exposure1 VC=0
{0x3348, 0x0111}, // exposure1 VC=1
{0x334C, 0x0211}, // exposure1 VC=2
{0x3350, 0x0311}, // exposure1 VC=3
{0x31B0, 0x41}, // frame_preamble
{0x31B2, 0x2e}, // line_preamble

{0x31B4, 0x2185},
{0x31B6, 0x1105},
{0x31B8, 0x2047},
{0x31BA, 0x105},
{0x31BC, 0x704},
{ }
}; /* MIPI_12_bit_450MBps_Settings */

/* 3 Exp HDR, Full Resolution, MIPI 450MBPS 4 lane 12-bit, 30FPS, XMCLK=24MHz */
static const struct ar0147_reg *ar0147_regs_hdr_mipi450mbps_12bit_30fps_rev3[] = {
	ar0147_rev3_Reset,
	ar0147_rev3_Sensor_Setup,
	ar0147_rev3_Serial_12_bit_Timing_Setup,
	ar0147_rev3_Readout_Mode_Configuration,
	ar0147_rev3_Full_Res_FOV,
	ar0147_rev3_3exp_30FPS_Timing_and_Exposure,
	ar0147_rev3_Serial_4_Lane_20_to_12_bit_Output,
	ar0147_rev3_MIPI_12_bit_450MBps_Settings,
	NULL
};

/* Super-Exposure Mode 1, Full Resolution, MIPI 450MBPS 4 lane 12-bit, 30FPS, XMCLK=24MHz */
static const struct ar0147_reg *ar0147_regs_se_mipi450mbps_12bit_30fps_rev3[] = {
	ar0147_rev3_Reset,
	ar0147_rev3_Sensor_Setup,
	ar0147_rev3_Super_Exposure_Mode_1_Setup,
	ar0147_rev3_Serial_12_bit_Timing_Setup,
	ar0147_rev3_Readout_Mode_Configuration,
	ar0147_rev3_Full_Res_FOV,
	ar0147_rev3_SE_Mode_1_30FPS_Timing_and_Exposure,
	ar0147_rev3_Serial_4_Lane_16_to_12_bit_Output,
	ar0147_rev3_MIPI_12_bit_450MBps_Settings,
	NULL
};

/* Super-Exposure Plus T2 Mode 1, Full Resolution, MIPI 450MBPS 4 lane 12-bit, 30FPS, XMCLK=24MHz */
static const struct ar0147_reg *ar0147_regs_seplus1_mipi450mbps_12bit_30fps_rev3[] = {
	ar0147_rev3_Reset,
	ar0147_rev3_Sensor_Setup,
	ar0147_rev3_Super_Exposure_Plus_T2_Mode_1_Setup,
	ar0147_rev3_Serial_12_bit_Timing_Setup,
	ar0147_rev3_Readout_Mode_Configuration,
	ar0147_rev3_Full_Res_FOV,
	ar0147_rev3_SE_Plus_T2_Mode_1_30FPS_Timing_and_Exposure,
	ar0147_rev3_Serial_4_Lane_20_to_12_bit_Output,
	ar0147_rev3_MIPI_12_bit_450MBps_Settings,
	NULL
};

/* Super-Exposure Plus T2 Mode 2, Full Resolution, MIPI 450MBPS 4 lane 12-bit, 30FPS, XMCLK=24MHz */
static const struct ar0147_reg *ar0147_regs_seplus2_mipi450mbps_12bit_30fps_rev3[] = {
	ar0147_rev3_Reset,
	ar0147_rev3_Sensor_Setup,
	ar0147_rev3_Super_Exposure_Plus_T2_Mode_2_Setup,
	ar0147_rev3_Serial_12_bit_Timing_Setup,
	ar0147_rev3_Readout_Mode_Configuration,
	ar0147_rev3_Full_Res_FOV,
	ar0147_rev3_SE_Plus_T2_Mode_2_50MHz_29FPS_Timing_and_Exposure,
	ar0147_rev3_Serial_4_Lane_20_to_12_bit_Output,
	ar0147_rev3_MIPI_12_bit_450MBps_Settings,
	NULL
};
