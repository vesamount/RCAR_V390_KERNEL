/*
 * ON Semiconductor AR0132 sensor camera wizard 1110x620@30/BGGR/BT601/12bit
 *
 * Copyright (C) 2017 Cogent Embedded, Inc.
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 */

//#define AR0132_DISPLAY_PATTERN_FIXED
//#define AR0132_DISPLAY_PATTERN_COLOR_BAR

#define AR0132_EMBEDDED_LINE

#define AR0132_MAX_WIDTH		1665 // (1110*3/2)
#define AR0132_MAX_HEIGHT		624

#define AR0132_DELAY			0xffff

#define AR0132_MAX_ROI_DIM_X		1288
#define AR0132_MAX_ROI_DIM_Y		968
#define AR0132_InfoLines		4

#define AR0132_ROI_DIM_X		1110 // 1104
#define AR0132_ROI_DIM_Y		620 // AR0132_MAX_HEIGHT

#define AR0132_ROI_Y_START		0x00AE
#define AR0132_ROI_X_START		0x005C
#define AR0132_ROI_Y_END		AR0132_ROI_Y_START+AR0132_ROI_DIM_Y-1
#define AR0132_ROI_X_END		AR0132_ROI_X_START+AR0132_ROI_DIM_X-1

#define AR0132_FrameLength_Lines	0x029E
#define AR0132_LineLength_Ticks		0x06B6

#define AR0132_PLL_VT_Pix_Clk_Div	0x0008
#define AR0132_PLL_VT_Sys_Clk_Div	0x0001
#define AR0132_PLL_Pre_Clk_Div		0x0004
#define AR0132_PLL_Multiplier		0x003C

#define AR0132_DigitalTest		0x2002

struct ar0132_reg {
	u16	reg;
	u16	val;
};

static const struct ar0132_reg ar0132_regs_wizard[] = {
{0x301A, 0x0001},	// reset
{AR0132_DELAY, 100},
{0x301A, 0x10D8},	// Stream off and setup parallel
{0x3070, 0x0001},
{0x3070, 0x0000},	//  1: Solid color test pattern,
			//  2: Full color bar test pattern,
			//  3: Fade to grey color bar test pattern,
			//256: Walking 1 test pattern (12 bit)
#ifdef AR0132_DISPLAY_PATTERN_FIXED
{0x3070, 0x0001},
{0x3072, 0x0123},	// R
{0x3074, 0x0456},	// G(GR row)
{0x3076, 0x0abc},	// B
{0x3078, 0x0def},	// G(GB row)
#endif
#ifdef AR0132_DISPLAY_PATTERN_COLOR_BAR
{0x3070, 0x0002},
#endif
{AR0132_DELAY, 250},
// patch begin
{0x3088, 0x8000},
{0x3086, 0x0025}, {0x3086, 0x5050}, {0x3086, 0x2D26}, {0x3086, 0x0828}, {0x3086, 0x0D17}, {0x3086, 0x0926}, {0x3086, 0x0028}, {0x3086, 0x0526},
{0x3086, 0xA728}, {0x3086, 0x0725}, {0x3086, 0x8080}, {0x3086, 0x2925}, {0x3086, 0x0040}, {0x3086, 0x2702}, {0x3086, 0x1616}, {0x3086, 0x2706},
{0x3086, 0x1736}, {0x3086, 0x26A6}, {0x3086, 0x1703}, {0x3086, 0x26A4}, {0x3086, 0x171F}, {0x3086, 0x2805}, {0x3086, 0x2620}, {0x3086, 0x2804},
{0x3086, 0x2520}, {0x3086, 0x2027}, {0x3086, 0x0017}, {0x3086, 0x1D25}, {0x3086, 0x0020}, {0x3086, 0x1F17}, {0x3086, 0x1028}, {0x3086, 0x0519},
{0x3086, 0x1703}, {0x3086, 0x2706}, {0x3086, 0x1703}, {0x3086, 0x1741}, {0x3086, 0x2660}, {0x3086, 0x17AE}, {0x3086, 0x2500}, {0x3086, 0x9027},
{0x3086, 0x0026}, {0x3086, 0x1828}, {0x3086, 0x002E}, {0x3086, 0x2A28}, {0x3086, 0x081C}, {0x3086, 0x1470}, {0x3086, 0x7003}, {0x3086, 0x1470},
{0x3086, 0x7004}, {0x3086, 0x1470}, {0x3086, 0x7005}, {0x3086, 0x1470}, {0x3086, 0x7009}, {0x3086, 0x170C}, {0x3086, 0x0014}, {0x3086, 0x0020},
{0x3086, 0x2300}, {0x3086, 0x1400}, {0x3086, 0x5003}, {0x3086, 0x1400}, {0x3086, 0x2003}, {0x3086, 0x1400}, {0x3086, 0x5022}, {0x3086, 0x0414},
{0x3086, 0x0020}, {0x3086, 0x0414}, {0x3086, 0x0050}, {0x3086, 0x0514}, {0x3086, 0x0020}, {0x3086, 0x2405}, {0x3086, 0x1400}, {0x3086, 0x5001},
{0x3086, 0x2550}, {0x3086, 0x502D}, {0x3086, 0x2608}, {0x3086, 0x280D}, {0x3086, 0x1709}, {0x3086, 0x2600}, {0x3086, 0x2805}, {0x3086, 0x26A7},
{0x3086, 0x2807}, {0x3086, 0x2580}, {0x3086, 0x8029}, {0x3086, 0x2500}, {0x3086, 0x4027}, {0x3086, 0x0216}, {0x3086, 0x1627}, {0x3086, 0x0617},
{0x3086, 0x3626}, {0x3086, 0xA617}, {0x3086, 0x0326}, {0x3086, 0xA417}, {0x3086, 0x1F28}, {0x3086, 0x0526}, {0x3086, 0x2028}, {0x3086, 0x0425},
{0x3086, 0x2020}, {0x3086, 0x2700}, {0x3086, 0x171D}, {0x3086, 0x2500}, {0x3086, 0x2020}, {0x3086, 0x1710}, {0x3086, 0x2805}, {0x3086, 0x1A17},
{0x3086, 0x0327}, {0x3086, 0x0617}, {0x3086, 0x0317}, {0x3086, 0x4126}, {0x3086, 0x6017}, {0x3086, 0xAE25}, {0x3086, 0x0090}, {0x3086, 0x2700},
{0x3086, 0x2618}, {0x3086, 0x2800}, {0x3086, 0x2E2A}, {0x3086, 0x2808}, {0x3086, 0x1D05}, {0x3086, 0x1470}, {0x3086, 0x7009}, {0x3086, 0x1720},
{0x3086, 0x1400}, {0x3086, 0x2024}, {0x3086, 0x1400}, {0x3086, 0x5002}, {0x3086, 0x2550}, {0x3086, 0x502D}, {0x3086, 0x2608}, {0x3086, 0x280D},
{0x3086, 0x1709}, {0x3086, 0x2600}, {0x3086, 0x2805}, {0x3086, 0x26A7}, {0x3086, 0x2807}, {0x3086, 0x2580}, {0x3086, 0x8029}, {0x3086, 0x2500},
{0x3086, 0x4027}, {0x3086, 0x0216}, {0x3086, 0x1627}, {0x3086, 0x0617}, {0x3086, 0x3626}, {0x3086, 0xA617}, {0x3086, 0x0326}, {0x3086, 0xA417},
{0x3086, 0x1F28}, {0x3086, 0x0526}, {0x3086, 0x2028}, {0x3086, 0x0425}, {0x3086, 0x2020}, {0x3086, 0x2700}, {0x3086, 0x171D}, {0x3086, 0x2500},
{0x3086, 0x2021}, {0x3086, 0x1710}, {0x3086, 0x2805}, {0x3086, 0x1B17}, {0x3086, 0x0327}, {0x3086, 0x0617}, {0x3086, 0x0317}, {0x3086, 0x4126},
{0x3086, 0x6017}, {0x3086, 0xAE25}, {0x3086, 0x0090}, {0x3086, 0x2700}, {0x3086, 0x2618}, {0x3086, 0x2800}, {0x3086, 0x2E2A}, {0x3086, 0x2808},
{0x3086, 0x1E17}, {0x3086, 0x0A05}, {0x3086, 0x1470}, {0x3086, 0x7009}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616},
{0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616},
{0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1616}, {0x3086, 0x1400}, {0x3086, 0x2024}, {0x3086, 0x1400}, {0x3086, 0x502B},
{0x3086, 0x302C}, {0x3086, 0x2C2C}, {0x3086, 0x2C00}, {0x3086, 0x0225}, {0x3086, 0x5050}, {0x3086, 0x2D26}, {0x3086, 0x0828}, {0x3086, 0x0D17},
{0x3086, 0x0926}, {0x3086, 0x0028}, {0x3086, 0x0526}, {0x3086, 0xA728}, {0x3086, 0x0725}, {0x3086, 0x8080}, {0x3086, 0x2917}, {0x3086, 0x0525},
{0x3086, 0x0040}, {0x3086, 0x2702}, {0x3086, 0x1616}, {0x3086, 0x2706}, {0x3086, 0x1736}, {0x3086, 0x26A6}, {0x3086, 0x1703}, {0x3086, 0x26A4},
{0x3086, 0x171F}, {0x3086, 0x2805}, {0x3086, 0x2620}, {0x3086, 0x2804}, {0x3086, 0x2520}, {0x3086, 0x2027}, {0x3086, 0x0017}, {0x3086, 0x1E25},
{0x3086, 0x0020}, {0x3086, 0x2117}, {0x3086, 0x1028}, {0x3086, 0x051B}, {0x3086, 0x1703}, {0x3086, 0x2706}, {0x3086, 0x1703}, {0x3086, 0x1747},
{0x3086, 0x2660}, {0x3086, 0x17AE}, {0x3086, 0x2500}, {0x3086, 0x9027}, {0x3086, 0x0026}, {0x3086, 0x1828}, {0x3086, 0x002E}, {0x3086, 0x2A28},
{0x3086, 0x081E}, {0x3086, 0x0831}, {0x3086, 0x1440}, {0x3086, 0x4014}, {0x3086, 0x2020}, {0x3086, 0x1410}, {0x3086, 0x1034}, {0x3086, 0x1400},
{0x3086, 0x1014}, {0x3086, 0x0020}, {0x3086, 0x1400}, {0x3086, 0x4013}, {0x3086, 0x1802}, {0x3086, 0x1470}, {0x3086, 0x7004}, {0x3086, 0x1470},
{0x3086, 0x7003}, {0x3086, 0x1470}, {0x3086, 0x7017}, {0x3086, 0x2002}, {0x3086, 0x1400}, {0x3086, 0x2002}, {0x3086, 0x1400}, {0x3086, 0x5004},
{0x3086, 0x1400}, {0x3086, 0x2004}, {0x3086, 0x1400}, {0x3086, 0x5022}, {0x3086, 0x0314}, {0x3086, 0x0020}, {0x3086, 0x0314}, {0x3086, 0x0050},
{0x3086, 0x2C2C}, {0x3086, 0x2C2C},
{0x309E, 0x0186},
{0x309E, 0x0186},
// patch end
{AR0132_DELAY, 250},
{0x301A, 0x10D8},	// WR= RESET_REGISTER, 0x10D8 - stop streaming
{0x3082, 0x0028},	// Set   HiDy OPERATION_MODE_CTRL(A) Requested integration time ratio (T2 to T3):  8  &  (T1 t0 T2): 16
{0x3084, 0x0028},	// Set   HiDy OPERATION_MODE_CTRL(B) Requested integration time ratio (T2 to T3): 16  &  (T1 t0 T2): 16
{0x301E, 0x00C8},	// set datapedestal to 200 to avoid clipping near saturation
{0x3EDA, 0x0F03},	// Set vln_dac to 0x3 as recommended by Sergey
{0x3EDE, 0xC007},
{0x3ED8, 0x01EF},	// Vrst_low = +1
{0x3EE2, 0xA46B},
{0x3EE0, 0x067D},	// enable anti eclipse and adjust setting for high conversion gain
{0x3EDC, 0x0070},	// adjust anti eclipse setting for low conversion gain
{0x3044, 0x0404},	// disable digital row noise correction and cancels TX during column correction
{0x3EE6, 0x4303},	// Helps with column noise at low light
{0x3EE4, 0xD208},	// enable analog row noise correction
{0x3ED6, 0x00BD},
{0x3EE6, 0x8303},	// improves low light FPN
{0x30E4, 0x6372},	// ADC settings to improve noise performance
{0x30E2, 0x7253},
{0x30E0, 0x5470},
{0x30E6, 0xC4CC},
{0x30E8, 0x8050},
{AR0132_DELAY, 250},
{0x3058, 0x003F},	// WR= BLUE_GAIN, 0x003F
{0x3014, 0},		// Fine_IT_Time(A)
{0x3002, AR0132_ROI_Y_START}, // WR= Y_ADDR_START_(A)
{0x3004, AR0132_ROI_X_START}, // WR= X_ADDR_START_(A)
{0x3006, AR0132_ROI_Y_END}, // WR= Y_ADDR_END_(A)
{0x3008, AR0132_ROI_X_END}, // WR= X_ADDR_END_(A)
{0x300A, AR0132_FrameLength_Lines}, // WR= FRAME_LENGTH_LINES_(A)
{0x3018, 0},		// Fine_IT_Time(B)
{0x308C, AR0132_ROI_Y_START}, // Y_ADDR_START_(B)
{0x308A, AR0132_ROI_X_START}, // X_ADDR_START_(B)
{0x3090, AR0132_ROI_Y_END}, // Y_ADDR_END_(B)
{0x308E, AR0132_ROI_X_END}, // X_ADDR_END_(B)
{0x30AA, AR0132_FrameLength_Lines}, // FRAME_LENGTH_LINES_(B)
{0x300C, AR0132_LineLength_Ticks}, // Line Length
{0x301A, 0x10D8},	// Disable Streaming and setup parallel
{0x31D0, 0x0001},	// Set to 12 bits
{0x3028, 0x0010},	// ROW_SPEED = 16
{0x302A, AR0132_PLL_VT_Pix_Clk_Div},
{0x302C, AR0132_PLL_VT_Sys_Clk_Div},
{0x302E, AR0132_PLL_Pre_Clk_Div},
{0x3030, AR0132_PLL_Multiplier},
{0x3032, 0x0000},	// SCALING_MODE = 0
{0x3040, 0xC000},	// READ_MODE    = read_mode_vert_flip    | read_mode_horiz_mirror
{0x3044, 0x0404},	// Dark Control = 1028
{0x30A6, 0x0001},	// Y Odd Inc. (A) = 1
{0x30A8, 0x0001},	// Y Odd Inc. (B) = 1
{0x30B0, AR0132_DigitalTest},
{AR0132_DELAY, 100},
#ifdef AR0132_EMBEDDED_LINE
{0x3064, 0x1982},	// Embedded Data on
#else
{0x3064, 0x1802},	// Embedded Data off
#endif
{0x3100, 0x0084},	// WR= AECTRLREG,
{0x3190, 0x6BA0},
{0x3194, 0x0E74},
{0x3196, 0x0ED8},
{0x3198, 0x0FA0},
{0x319E, 0x5040},	// resetvalue
{0x31A2, 0x0FA0},
//FrontCamera Specific Section
//Common
#ifdef AR0132_EMBEDDED_LINE
{0x3064, 0x1982},
#else
{0x3064, 0x1802},
#endif
{0x30B4, 0x0011},
{0x30ba, 0x0008},
{0x3180, 0xE000},
{0x3182, 0x012C},
{0x3190, 0x6BA0},
{0x3194, 0x0E74},
{0x3196, 0x0ED8},
{0x3198, 0x0FA0},
{0x319E, 0x5040},
{0x31A2, 0x0FA0},
//Context A:0
{0x3012, 0x0021},
{0x3014, 0x0000},
{0x30A6, 0x0001},
{0x3056, 0x0008},
{0x3058, 0x0008},
{0x305A, 0x0008},
{0x305C, 0x0008},
{0x305E, 0x0008},
{0x3082, 0x0014},
//Context B:0
{0x3016, 0x007F},
{0x3018, 0x0000},
{0x30A8, 0x0001},
{0x30BC, 0x0020},
{0x30BE, 0x0020},
{0x30C0, 0x0020},
{0x30C2, 0x0020},
{0x30C4, 0x0020},
{0x3084, 0x0028},
//not covered
{0x301E, 0x00C8},
{0x3044, 0x0404},
{0x31D0, 0x0001},
{0x30B0, 0x2002},
};
